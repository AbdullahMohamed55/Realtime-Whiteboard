#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dum:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/*
ADDED BY ZIDAN
 */

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


var io = require('socket.io')(server);
var users = 0; //count the users
// open socket conn whenever a new room is created
io.sockets.on("connection", newConnection);

function newConnection(socket) {

    console.log("new connection  " + socket.id);
    users += 1; // Add 1 to the count
    reloadUsers(); // Send the count to all the users

    socket.on('message', function(msg){
        console.log("New message:", msg);
        //send it to all other users
        //socket.broadcast.emit('chat message', msg);
        //send it to all including me!
        io.sockets.emit('chat message', msg);
    });
    socket.on('disconnect', function() {
        console.log("Client has disconnected");
        users -= 1;
        reloadUsers();

    });
}
function reloadUsers() { // Send the count of the users to all
    io.sockets.emit('nbUsers', {"nb": users});
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
