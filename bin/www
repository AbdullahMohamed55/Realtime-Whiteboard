
var app = require('../app');
var debug = require('debug')('express:server');
var http = require('http');


// Get port from environment and store in Express.

var port = normalizePort(process.env.PORT || '3000');
// var server = app.listen(process.env.PORT || 3000, listen);

app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);


//Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


// Normalize a port into a number, string, or false.

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}


//Event listener for HTTP server "error" event.
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}


//Event listener for HTTP server "listening" event.
// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }

//===================================
function onListening() {
    var host = server.address().address;
    var port1 = server.address().port;
    console.log('Example app listening at http://' + host + ':' + port1);
}
// app.use(express.static('public'));


// WebSocket Portion
// WebSockets work with the HTTP server
var io = require('socket.io')(server);

io.sockets.on('connection',
    // We are given a websocket object in our function
    function (socket) {

        console.log("We have a new client: " + socket.id);

        // (2): The server recieves a ping event
        // from the browser on this socket
        // socket.on('ping', function ( data ) {
        //
        //     console.log('socket: server recieves ping (2)');
        //
        //     // (3): Emit a pong event all listening browsers
        //     // with the data from the ping event
        //     io.sockets.emit( 'pong', data );
        //     console.log('socket: server sends pong to all (3)');
        //
        // });

        // When this user emits, client side: socket.emit('otherevent',some data);
        socket.on('drawCircle',
            function(data) {
                // Data comes in as whatever was sent, including objects
                console.log("Received data: " + data);

                // Send it to all other clients
                socket.broadcast.emit('drawCircle', data);
            }
        );


        socket.on('changeBackground',
            function(data) {
                // Data comes in as whatever was sent, including objects
                console.log("Received data: " + data);

                // Send it to all other clients
                socket.broadcast.emit('changeBackground', data);
            }
        );

        socket.on('disconnect', function() {
            console.log("Client has disconnected");
        });
    }
);

// var io = require('socket.io')(server);
// io.sockets.on('connection',
//     // We are given a websocket object in our function
//     function (socket) {
//
//         console.log("We have a new client: " + socket.id);
//
//         // When this user emits, client side: socket.emit('otherevent',some data);
//         socket.on('mouse',
//             function(data) {
//                 // Data comes in as whatever was sent, including objects
//                 console.log("Received data: " + data);
//
//                 // Send it to all other clients
//                 socket.broadcast.emit('mouse', data);
//             }
//         );
//
//         socket.on('disconnect', function() {
//             console.log("Client has disconnected");
//         });
//     }
// );

//p5 working part
// var io = require('socket.io')(server);
//
// // Register a callback function to run when we have an individual connection
// // This is run for each individual user that connects
// io.sockets.on('connection',
//     // We are given a websocket object in our function
//     function (socket) {
//
//         console.log("We have a new client: " + socket.id);
//
//         // When this user emits, client side: socket.emit('otherevent',some data);
//         socket.on('mouse',
//             function(data) {
//                 // Data comes in as whatever was sent, including objects
//                 console.log("Received: 'mouse' " + data.x + " " + data.y);
//
//                 // Send it to all other clients
//                 socket.broadcast.emit('mouse', data);
//
//                 // This is a way to send to everyone including sender
//                 // io.sockets.emit('message', "this goes to everyone");
//
//             }
//         );
//
//         socket.on('disconnect', function() {
//             console.log("Client has disconnected");
//         });
//     }
// );
