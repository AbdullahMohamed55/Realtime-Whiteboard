
var app = require('../app');
var debug = require('debug')('express:server');
var http = require('http');


// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');

app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);


//Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')(server);

io.sockets.on('connection',
    // We are given a websocket object in our function
    function (socket) {

        console.log("We have a new client: " + socket.id);

        // When this user emits, client side: socket.emit('otherevent',some data);
        socket.on('drawCircle',
            function(data) {
                // Data comes in as whatever was sent, including objects
                console.log("Received data: " + data);

                // Send it to all other clients
                socket.broadcast.emit('drawCircle', data);
            }
        );


        socket.on('changeBackground',
            function(data) {
                // Data comes in as whatever was sent, including objects
                console.log("Received data: " + data);

                // Send it to all other clients
                socket.broadcast.emit('changeBackground', data);
            }
        );

        socket.on('brush1',
            function(data) {
                // Data comes in as whatever was sent, including objects
                console.log("Received data1: " + data);
                // Send it to all other clients
                socket.broadcast.emit('brush1', data);
            }
        );

        socket.on('brush2',
            function(data) {
                // Data comes in as whatever was sent, including objects
                console.log("Received data2: " + data);
                // Send it to all other clients
                socket.broadcast.emit('brush2', data);
            }
        );

        socket.on('undo',
            function(data) {
                // Data comes in as whatever was sent, including objects
                console.log("Received undo request: " + data);
                // Send it to all other clients
                socket.broadcast.emit('undo', data);
            }
        );

        socket.on('mouse_up',
            function(data) {
                socket.broadcast.emit('mouse_up', data);
            }
        );

        socket.on('disconnect', function() {
            console.log("Client has disconnected");
        });
    }
);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}


//Event listener for HTTP server "error" event.
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}


//Event listener for HTTP server "listening" event.
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Example app listening at http://' + addr.address  + addr.port);

}
