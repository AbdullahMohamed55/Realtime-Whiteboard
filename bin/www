#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dum:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/*
ADDED BY ZIDAN
 */

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


var io = require('socket.io')(server);
//TODO USE A DB (reddis)
//NAIVE SOLUTION!
var roomArr = [];
var roomHist = [];
var roomUrl ={};
// open socket conn whenever a new room is created
io.sockets.on("connection", newConnection);


function newConnection(socket) {

    var addedUser = false;
    console.log("connected");
    io.clients(function(error, clients){
        if (error) throw error;
        console.log(clients);
    });
    // when the client emits 'add user', this listens and executes
    socket.on('addUser2Room', function (data) {
        if (addedUser) return;
        // we store the username in the socket session for this client and this room
        console.log(data.username, " is joining room ", data.roomname);

        socket.join(data.roomname);

        socket.username = data.username;
        socket.roomname = data.roomname;
        //user joins an existing room
        if(data.roomname in roomArr){
            roomArr[data.roomname] += 1;
            //supply new user with room history
            io.to(socket.id).emit('updateNewJoiner',roomHist[data.roomname]);

        }
        else{
            //init this room history
            roomHist[data.roomname] = [];
            roomArr[data.roomname] = 1;

        }
        console.log(roomArr);
        //console.log(roomArr[data.roomname]);

        //console.log(socket.rooms);

        //console.log(socket.roomname);
        //++numUsers;
        addedUser = true;

        io.in(data.roomname).emit('login', {
            numUsers: roomArr[socket.roomname]
        });

        // sending to all clients in room except sender
        socket.to(data.roomname).emit('user joined', {
            username: socket.username,
            numUsers: roomArr[socket.roomname]
        });

    });

    // when the client emits 'new message', this listens and executes
    socket.on('new message', function (data) {
        // we tell the client to execute 'new message'
        roomHist[socket.roomname].push({username: socket.username,message: data});
        //TODO make it socket.to
        io.in(socket.roomname).emit('new message', {
            username: socket.username,
            message: data
        });
    });

    // when the client emits 'typing', we broadcast it to others
    socket.on('typing', function () {
        //console.log('typing');
        socket.to(socket.roomname).emit('typing', {
            username: socket.username
        });
    });

    // when the client emits 'stop typing', we broadcast it to others
    socket.on('stop typing', function () {
        //console.log('stopped typing');
        socket.to(socket.roomname).emit('stop typing', {
            username: socket.username
        });
    });

    // when the user disconnects.. perform this
    socket.on('disconnect', function () {
        console.log("disconnected");
        io.clients(function(error, clients){
            if (error) throw error;
            console.log("MEx: ", clients); // => [6em3d4TJP8Et9EMNAAAA, G5p55dHhGgUnLUctAAAB]
        });
        if (addedUser) {
            if(--roomArr[socket.roomname] == 0){
                delete roomArr[socket.roomname];
                delete roomHist[socket.roomname];
            }
            console.log("Rooms left : " , roomArr);

            console.log(socket.username, " has left room ", socket.roomname);
            // echo globally that this client has left
            socket.leave(socket.roomname);
            //socket.leaveAll();
            socket.to(socket.roomname).emit('user left', {
                username: socket.username,
                numUsers: roomArr[socket.roomname]
            });
        }
    });
}

///////////////////////////////////////////////////////
/*
    //console.log("new connection  " + socket.id);


    //reloadUsers(); // Send the count to all the users

    socket.on('message', function(msg,usr){
        console.log("New message:", msg,"From : " ,usr);
        //send it to all other users
        //socket.broadcast.emit('chat message', msg);
        //send it to all including me!
        io.sockets.emit('message', msg,usr);
    });
    socket.on('disconnect', function() {
        console.log("Client has disconnected");
        users -= 1;
        reloadUsers();

    });
}
function reloadUsers() { // Send the count of the users to all
    io.sockets.emit('nbUsers', {"nb": users});
}
*/
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
